generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FolderItem {
  id        Int      @id @default(autoincrement())
  userId    String
  label     String   @db.VarChar(30)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Folder    Folder?  @relation("item")
  Note      Note?

  parentFolderId Int?
  ParentFolder   Folder? @relation(name: "parent", fields: [parentFolderId], references: [id], onDelete: Cascade)

  @@index([label, userId])
}

model Folder {
  id           Int        @id @default(autoincrement())
  pinned       Boolean    @default(false)
  datePinned   DateTime   @default(now())
  folderItemId Int        @unique
  FolderItem   FolderItem @relation(name: "item", fields: [folderItemId], references: [id], onDelete: Cascade)

  Children FolderItem[] @relation("parent")
}

model Note {
  id           Int           @id @default(autoincrement())
  folderItemId Int           @unique
  FolderItem   FolderItem    @relation(fields: [folderItemId], references: [id], onDelete: Cascade)
  ExerciseNote ExerciseNote?
  RegularNote  RegularNote?
}

model ExerciseNote {
  id      Int       @id @default(autoincrement())
  noteId  Int       @unique
  Note    Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  Problem Problem[]
}

model RegularNote {
  id     Int   @id @default(autoincrement())
  noteId Int   @unique
  Note   Note  @relation(fields: [noteId], references: [id], onDelete: Cascade)
  canvas Json?
}

model Problem {
  id              Int      @id @default(autoincrement())
  exerciseNoteId  Int
  problemFileKey  String   @unique
  solutionFileKey String?
  canvas          Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  ExerciseNote ExerciseNote @relation(fields: [exerciseNoteId], references: [id], onDelete: Cascade)
}
